package nl.bvkatwijk.lens.example;

import nl.bvkatwijk.lens.example.Person;
import nl.bvkatwijk.lens.api.ILens;
import nl.bvkatwijk.lens.api.Lens;

public record PersonLens<SOURCE>(ILens<SOURCE, Person> inner) implements ILens<SOURCE, Person> {
	public static final PersonLens<Person> Âµ = new PersonLens<>(Lens.identity());
	public static final ILens<Person, java.lang.String> NAME = new Lens<>(Person::name, PersonLens::withName);
	public static final ILens<Person, nl.bvkatwijk.lens.example.Address> ADDRESS = new Lens<>(Person::address, PersonLens::withAddress);
	public static final ILens<Person, nl.bvkatwijk.lens.example.Address> WORK = new Lens<>(Person::work, PersonLens::withWork);
	public static final ILens<Person, io.vavr.collection.List<nl.bvkatwijk.lens.example.Person>> FRIENDS = new Lens<>(Person::friends, PersonLens::withFriends);
	public static final ILens<Person, java.lang.Boolean> COOL = new Lens<>(Person::cool, PersonLens::withCool);
	
	public ILens<SOURCE, java.lang.String> name() {
		return inner.andThen(NAME);
	}
	
	public nl.bvkatwijk.lens.example.AddressLens<SOURCE> address() {
		return new nl.bvkatwijk.lens.example.AddressLens<>(inner.andThen(ADDRESS));
	}
	
	public nl.bvkatwijk.lens.example.AddressLens<SOURCE> work() {
		return new nl.bvkatwijk.lens.example.AddressLens<>(inner.andThen(WORK));
	}
	
	public ILens<SOURCE, io.vavr.collection.List<nl.bvkatwijk.lens.example.Person>> friends() {
		return inner.andThen(FRIENDS);
	}
	
	public ILens<SOURCE, java.lang.Boolean> cool() {
		return inner.andThen(COOL);
	}
	
	public java.util.function.BiFunction<SOURCE, Person, SOURCE> with() {
		return inner.with();
	}
	
	public java.util.function.Function<SOURCE, Person> get() {
		return inner.get();
	}

	public static Person withName(Person person, java.lang.String name) {
		return person.name() != null && person.name().equals(name)
			? person
			: new Person(name, person.address(), person.work(), person.friends(), person.cool());
	}

	public static Person withAddress(Person person, nl.bvkatwijk.lens.example.Address address) {
		return person.address() != null && person.address().equals(address)
			? person
			: new Person(person.name(), address, person.work(), person.friends(), person.cool());
	}

	public static Person withWork(Person person, nl.bvkatwijk.lens.example.Address work) {
		return person.work() != null && person.work().equals(work)
			? person
			: new Person(person.name(), person.address(), work, person.friends(), person.cool());
	}

	public static Person withFriends(Person person, io.vavr.collection.List<nl.bvkatwijk.lens.example.Person> friends) {
		return person.friends() != null && person.friends().equals(friends)
			? person
			: new Person(person.name(), person.address(), person.work(), friends, person.cool());
	}

	public static Person withCool(Person person, java.lang.Boolean cool) {
		return person.cool() == cool
			? person
			: new Person(person.name(), person.address(), person.work(), person.friends(), cool);
	}
}