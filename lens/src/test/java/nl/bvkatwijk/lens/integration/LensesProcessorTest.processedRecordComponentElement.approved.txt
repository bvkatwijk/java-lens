package nl.bvkatwijk.lens.example;

import nl.bvkatwijk.lens.example.Person;
import nl.bvkatwijk.lens.api.ILens;
import nl.bvkatwijk.lens.api.Lens;

public record PersonLens<SOURCE>(ILens<SOURCE, Person> inner) implements ILens<SOURCE, Person> {
	public static final PersonLens<Person> Âµ = new PersonLens<>(Lens.identity());
	public static final ILens<Person, java.lang.String> NAME = new Lens<>(Person::name, Person::withName);
	public static final ILens<Person, nl.bvkatwijk.lens.example.Address> ADDRESS = new Lens<>(Person::address, Person::withAddress);
	public static final ILens<Person, nl.bvkatwijk.lens.example.Address> WORK = new Lens<>(Person::work, Person::withWork);
	public static final ILens<Person, io.vavr.collection.List<nl.bvkatwijk.lens.example.Person>> FRIENDS = new Lens<>(Person::friends, Person::withFriends);
	public static final ILens<Person, java.lang.Boolean> COOL = new Lens<>(Person::cool, Person::withCool);
	
	public ILens<SOURCE, java.lang.String> name() {
		return inner.andThen(NAME);
	}
	
	public nl.bvkatwijk.lens.example.AddressLens<SOURCE> address() {
		return new nl.bvkatwijk.lens.example.AddressLens<>(inner.andThen(ADDRESS));
	}
	
	public nl.bvkatwijk.lens.example.AddressLens<SOURCE> work() {
		return new nl.bvkatwijk.lens.example.AddressLens<>(inner.andThen(WORK));
	}
	
	public ILens<SOURCE, io.vavr.collection.List<nl.bvkatwijk.lens.example.Person>> friends() {
		return inner.andThen(FRIENDS);
	}
	
	public ILens<SOURCE, java.lang.Boolean> cool() {
		return inner.andThen(COOL);
	}
	
	public java.util.function.BiFunction<SOURCE, Person, SOURCE> with() {
		return inner.with();
	}
	
	public java.util.function.Function<SOURCE, Person> get() {
		return inner.get();
	}
}